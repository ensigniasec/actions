// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: agent/v1alpha1/service.proto

package agentv1alpha1connect

import (
	context "context"
	v1alpha1 "ensignia.dev/actions/internal/apis/agent/v1alpha1"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// AgentServiceName is the fully-qualified name of the AgentService service.
	AgentServiceName = "agent.v1alpha1.AgentService"
)

// AgentServiceClient is a client for the agent.v1alpha1.AgentService service.
type AgentServiceClient interface {
	RegisterCluster(context.Context, *connect_go.Request[v1alpha1.RegisterClusterRequest]) (*connect_go.Response[v1alpha1.RegisterClusterResponse], error)
	Replicate(context.Context, *connect_go.Request[v1alpha1.ReplicateRequest]) (*connect_go.Response[v1alpha1.ReplicateResponse], error)
	SubmitSBOM(context.Context, *connect_go.Request[v1alpha1.SubmitSBOMRequest]) (*connect_go.Response[emptypb.Empty], error)
	UploadProvenance(context.Context, *connect_go.Request[v1alpha1.UploadProvenanceRequest]) (*connect_go.Response[v1alpha1.UploadProvenanceResponse], error)
	// GetPolicy returns the admission controller policies for the cluster.
	// The agent returns a list of policies that are applied.
	GetPolicies(context.Context, *connect_go.Request[v1alpha1.GetPoliciesRequest]) (*connect_go.Response[v1alpha1.GetPoliciesResponse], error)
}

// NewAgentServiceClient constructs a client for the agent.v1alpha1.AgentService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAgentServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) AgentServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &agentServiceClient{
		registerCluster: connect_go.NewClient[v1alpha1.RegisterClusterRequest, v1alpha1.RegisterClusterResponse](
			httpClient,
			baseURL+"/agent.v1alpha1.AgentService/RegisterCluster",
			opts...,
		),
		replicate: connect_go.NewClient[v1alpha1.ReplicateRequest, v1alpha1.ReplicateResponse](
			httpClient,
			baseURL+"/agent.v1alpha1.AgentService/Replicate",
			opts...,
		),
		submitSBOM: connect_go.NewClient[v1alpha1.SubmitSBOMRequest, emptypb.Empty](
			httpClient,
			baseURL+"/agent.v1alpha1.AgentService/SubmitSBOM",
			opts...,
		),
		uploadProvenance: connect_go.NewClient[v1alpha1.UploadProvenanceRequest, v1alpha1.UploadProvenanceResponse](
			httpClient,
			baseURL+"/agent.v1alpha1.AgentService/UploadProvenance",
			opts...,
		),
		getPolicies: connect_go.NewClient[v1alpha1.GetPoliciesRequest, v1alpha1.GetPoliciesResponse](
			httpClient,
			baseURL+"/agent.v1alpha1.AgentService/GetPolicies",
			opts...,
		),
	}
}

// agentServiceClient implements AgentServiceClient.
type agentServiceClient struct {
	registerCluster  *connect_go.Client[v1alpha1.RegisterClusterRequest, v1alpha1.RegisterClusterResponse]
	replicate        *connect_go.Client[v1alpha1.ReplicateRequest, v1alpha1.ReplicateResponse]
	submitSBOM       *connect_go.Client[v1alpha1.SubmitSBOMRequest, emptypb.Empty]
	uploadProvenance *connect_go.Client[v1alpha1.UploadProvenanceRequest, v1alpha1.UploadProvenanceResponse]
	getPolicies      *connect_go.Client[v1alpha1.GetPoliciesRequest, v1alpha1.GetPoliciesResponse]
}

// RegisterCluster calls agent.v1alpha1.AgentService.RegisterCluster.
func (c *agentServiceClient) RegisterCluster(ctx context.Context, req *connect_go.Request[v1alpha1.RegisterClusterRequest]) (*connect_go.Response[v1alpha1.RegisterClusterResponse], error) {
	return c.registerCluster.CallUnary(ctx, req)
}

// Replicate calls agent.v1alpha1.AgentService.Replicate.
func (c *agentServiceClient) Replicate(ctx context.Context, req *connect_go.Request[v1alpha1.ReplicateRequest]) (*connect_go.Response[v1alpha1.ReplicateResponse], error) {
	return c.replicate.CallUnary(ctx, req)
}

// SubmitSBOM calls agent.v1alpha1.AgentService.SubmitSBOM.
func (c *agentServiceClient) SubmitSBOM(ctx context.Context, req *connect_go.Request[v1alpha1.SubmitSBOMRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.submitSBOM.CallUnary(ctx, req)
}

// UploadProvenance calls agent.v1alpha1.AgentService.UploadProvenance.
func (c *agentServiceClient) UploadProvenance(ctx context.Context, req *connect_go.Request[v1alpha1.UploadProvenanceRequest]) (*connect_go.Response[v1alpha1.UploadProvenanceResponse], error) {
	return c.uploadProvenance.CallUnary(ctx, req)
}

// GetPolicies calls agent.v1alpha1.AgentService.GetPolicies.
func (c *agentServiceClient) GetPolicies(ctx context.Context, req *connect_go.Request[v1alpha1.GetPoliciesRequest]) (*connect_go.Response[v1alpha1.GetPoliciesResponse], error) {
	return c.getPolicies.CallUnary(ctx, req)
}

// AgentServiceHandler is an implementation of the agent.v1alpha1.AgentService service.
type AgentServiceHandler interface {
	RegisterCluster(context.Context, *connect_go.Request[v1alpha1.RegisterClusterRequest]) (*connect_go.Response[v1alpha1.RegisterClusterResponse], error)
	Replicate(context.Context, *connect_go.Request[v1alpha1.ReplicateRequest]) (*connect_go.Response[v1alpha1.ReplicateResponse], error)
	SubmitSBOM(context.Context, *connect_go.Request[v1alpha1.SubmitSBOMRequest]) (*connect_go.Response[emptypb.Empty], error)
	UploadProvenance(context.Context, *connect_go.Request[v1alpha1.UploadProvenanceRequest]) (*connect_go.Response[v1alpha1.UploadProvenanceResponse], error)
	// GetPolicy returns the admission controller policies for the cluster.
	// The agent returns a list of policies that are applied.
	GetPolicies(context.Context, *connect_go.Request[v1alpha1.GetPoliciesRequest]) (*connect_go.Response[v1alpha1.GetPoliciesResponse], error)
}

// NewAgentServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAgentServiceHandler(svc AgentServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/agent.v1alpha1.AgentService/RegisterCluster", connect_go.NewUnaryHandler(
		"/agent.v1alpha1.AgentService/RegisterCluster",
		svc.RegisterCluster,
		opts...,
	))
	mux.Handle("/agent.v1alpha1.AgentService/Replicate", connect_go.NewUnaryHandler(
		"/agent.v1alpha1.AgentService/Replicate",
		svc.Replicate,
		opts...,
	))
	mux.Handle("/agent.v1alpha1.AgentService/SubmitSBOM", connect_go.NewUnaryHandler(
		"/agent.v1alpha1.AgentService/SubmitSBOM",
		svc.SubmitSBOM,
		opts...,
	))
	mux.Handle("/agent.v1alpha1.AgentService/UploadProvenance", connect_go.NewUnaryHandler(
		"/agent.v1alpha1.AgentService/UploadProvenance",
		svc.UploadProvenance,
		opts...,
	))
	mux.Handle("/agent.v1alpha1.AgentService/GetPolicies", connect_go.NewUnaryHandler(
		"/agent.v1alpha1.AgentService/GetPolicies",
		svc.GetPolicies,
		opts...,
	))
	return "/agent.v1alpha1.AgentService/", mux
}

// UnimplementedAgentServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAgentServiceHandler struct{}

func (UnimplementedAgentServiceHandler) RegisterCluster(context.Context, *connect_go.Request[v1alpha1.RegisterClusterRequest]) (*connect_go.Response[v1alpha1.RegisterClusterResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("agent.v1alpha1.AgentService.RegisterCluster is not implemented"))
}

func (UnimplementedAgentServiceHandler) Replicate(context.Context, *connect_go.Request[v1alpha1.ReplicateRequest]) (*connect_go.Response[v1alpha1.ReplicateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("agent.v1alpha1.AgentService.Replicate is not implemented"))
}

func (UnimplementedAgentServiceHandler) SubmitSBOM(context.Context, *connect_go.Request[v1alpha1.SubmitSBOMRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("agent.v1alpha1.AgentService.SubmitSBOM is not implemented"))
}

func (UnimplementedAgentServiceHandler) UploadProvenance(context.Context, *connect_go.Request[v1alpha1.UploadProvenanceRequest]) (*connect_go.Response[v1alpha1.UploadProvenanceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("agent.v1alpha1.AgentService.UploadProvenance is not implemented"))
}

func (UnimplementedAgentServiceHandler) GetPolicies(context.Context, *connect_go.Request[v1alpha1.GetPoliciesRequest]) (*connect_go.Response[v1alpha1.GetPoliciesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("agent.v1alpha1.AgentService.GetPolicies is not implemented"))
}
