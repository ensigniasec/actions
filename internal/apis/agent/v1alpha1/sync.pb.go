// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: agent/v1alpha1/sync.proto

package agentv1alpha1

import (
	v1alpha1 "ensignia.dev/actions/internal/apis/ensignia/v1alpha1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Op int32

const (
	Op_OP_UNSPECIFIED Op = 0
	Op_OP_ADD         Op = 1
	Op_OP_REMOVE      Op = 2
	Op_OP_UPDATE      Op = 3
)

// Enum value maps for Op.
var (
	Op_name = map[int32]string{
		0: "OP_UNSPECIFIED",
		1: "OP_ADD",
		2: "OP_REMOVE",
		3: "OP_UPDATE",
	}
	Op_value = map[string]int32{
		"OP_UNSPECIFIED": 0,
		"OP_ADD":         1,
		"OP_REMOVE":      2,
		"OP_UPDATE":      3,
	}
)

func (x Op) Enum() *Op {
	p := new(Op)
	*p = x
	return p
}

func (x Op) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Op) Descriptor() protoreflect.EnumDescriptor {
	return file_agent_v1alpha1_sync_proto_enumTypes[0].Descriptor()
}

func (Op) Type() protoreflect.EnumType {
	return &file_agent_v1alpha1_sync_proto_enumTypes[0]
}

func (x Op) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Op.Descriptor instead.
func (Op) EnumDescriptor() ([]byte, []int) {
	return file_agent_v1alpha1_sync_proto_rawDescGZIP(), []int{0}
}

type WellKnownKind int32

const (
	WellKnownKind_WELL_KNOWN_KIND_UNSPECIFIED                 WellKnownKind = 0
	WellKnownKind_WELL_KNOWN_KIND_BINDING                     WellKnownKind = 1
	WellKnownKind_WELL_KNOWN_KIND_CONFIG_MAP                  WellKnownKind = 2
	WellKnownKind_WELL_KNOWN_KIND_ENDPOINTS                   WellKnownKind = 3
	WellKnownKind_WELL_KNOWN_KIND_EVENT                       WellKnownKind = 4
	WellKnownKind_WELL_KNOWN_KIND_LIMIT_RANGE                 WellKnownKind = 5
	WellKnownKind_WELL_KNOWN_KIND_PERSISTENT_VOLUME_CLAIM     WellKnownKind = 6
	WellKnownKind_WELL_KNOWN_KIND_POD                         WellKnownKind = 7
	WellKnownKind_WELL_KNOWN_KIND_POD_TEMPLATE                WellKnownKind = 8
	WellKnownKind_WELL_KNOWN_KIND_REPLICATION_CONTROLLER      WellKnownKind = 9
	WellKnownKind_WELL_KNOWN_KIND_RESOURCE_QUOTA              WellKnownKind = 10
	WellKnownKind_WELL_KNOWN_KIND_SECRET                      WellKnownKind = 11
	WellKnownKind_WELL_KNOWN_KIND_SERVICE_ACCOUNT             WellKnownKind = 12
	WellKnownKind_WELL_KNOWN_KIND_SERVICE                     WellKnownKind = 13
	WellKnownKind_WELL_KNOWN_KIND_CONTROLLER_REVISION         WellKnownKind = 14
	WellKnownKind_WELL_KNOWN_KIND_DAEMON_SET                  WellKnownKind = 15
	WellKnownKind_WELL_KNOWN_KIND_DEPLOYMENT                  WellKnownKind = 16
	WellKnownKind_WELL_KNOWN_KIND_REPLICA_SET                 WellKnownKind = 17
	WellKnownKind_WELL_KNOWN_KIND_STATEFUL_SET                WellKnownKind = 18
	WellKnownKind_WELL_KNOWN_KIND_LOCAL_SUBJECT_ACCESS_REVIEW WellKnownKind = 19
	WellKnownKind_WELL_KNOWN_KIND_HORIZONTAL_POD_AUTOSCALER   WellKnownKind = 20
	WellKnownKind_WELL_KNOWN_KIND_CRON_JOB                    WellKnownKind = 21
	WellKnownKind_WELL_KNOWN_KIND_JOB                         WellKnownKind = 22
	WellKnownKind_WELL_KNOWN_KIND_LEASE                       WellKnownKind = 23
	WellKnownKind_WELL_KNOWN_KIND_ENDPOINT_SLICE              WellKnownKind = 24
	WellKnownKind_WELL_KNOWN_KIND_INGRESS                     WellKnownKind = 25
	WellKnownKind_WELL_KNOWN_KIND_NETWORK_POLICY              WellKnownKind = 26
	WellKnownKind_WELL_KNOWN_KIND_POD_DISRUPTION_BUDGET       WellKnownKind = 27
	WellKnownKind_WELL_KNOWN_KIND_ROLE_BINDING                WellKnownKind = 28
	WellKnownKind_WELL_KNOWN_KIND_ROLE                        WellKnownKind = 29
	WellKnownKind_WELL_KNOWN_KIND_CSI_STORAGE_CAPACITY        WellKnownKind = 30
	WellKnownKind_WELL_KNOWN_KIND_NAMESPACE                   WellKnownKind = 31
)

// Enum value maps for WellKnownKind.
var (
	WellKnownKind_name = map[int32]string{
		0:  "WELL_KNOWN_KIND_UNSPECIFIED",
		1:  "WELL_KNOWN_KIND_BINDING",
		2:  "WELL_KNOWN_KIND_CONFIG_MAP",
		3:  "WELL_KNOWN_KIND_ENDPOINTS",
		4:  "WELL_KNOWN_KIND_EVENT",
		5:  "WELL_KNOWN_KIND_LIMIT_RANGE",
		6:  "WELL_KNOWN_KIND_PERSISTENT_VOLUME_CLAIM",
		7:  "WELL_KNOWN_KIND_POD",
		8:  "WELL_KNOWN_KIND_POD_TEMPLATE",
		9:  "WELL_KNOWN_KIND_REPLICATION_CONTROLLER",
		10: "WELL_KNOWN_KIND_RESOURCE_QUOTA",
		11: "WELL_KNOWN_KIND_SECRET",
		12: "WELL_KNOWN_KIND_SERVICE_ACCOUNT",
		13: "WELL_KNOWN_KIND_SERVICE",
		14: "WELL_KNOWN_KIND_CONTROLLER_REVISION",
		15: "WELL_KNOWN_KIND_DAEMON_SET",
		16: "WELL_KNOWN_KIND_DEPLOYMENT",
		17: "WELL_KNOWN_KIND_REPLICA_SET",
		18: "WELL_KNOWN_KIND_STATEFUL_SET",
		19: "WELL_KNOWN_KIND_LOCAL_SUBJECT_ACCESS_REVIEW",
		20: "WELL_KNOWN_KIND_HORIZONTAL_POD_AUTOSCALER",
		21: "WELL_KNOWN_KIND_CRON_JOB",
		22: "WELL_KNOWN_KIND_JOB",
		23: "WELL_KNOWN_KIND_LEASE",
		24: "WELL_KNOWN_KIND_ENDPOINT_SLICE",
		25: "WELL_KNOWN_KIND_INGRESS",
		26: "WELL_KNOWN_KIND_NETWORK_POLICY",
		27: "WELL_KNOWN_KIND_POD_DISRUPTION_BUDGET",
		28: "WELL_KNOWN_KIND_ROLE_BINDING",
		29: "WELL_KNOWN_KIND_ROLE",
		30: "WELL_KNOWN_KIND_CSI_STORAGE_CAPACITY",
		31: "WELL_KNOWN_KIND_NAMESPACE",
	}
	WellKnownKind_value = map[string]int32{
		"WELL_KNOWN_KIND_UNSPECIFIED":                 0,
		"WELL_KNOWN_KIND_BINDING":                     1,
		"WELL_KNOWN_KIND_CONFIG_MAP":                  2,
		"WELL_KNOWN_KIND_ENDPOINTS":                   3,
		"WELL_KNOWN_KIND_EVENT":                       4,
		"WELL_KNOWN_KIND_LIMIT_RANGE":                 5,
		"WELL_KNOWN_KIND_PERSISTENT_VOLUME_CLAIM":     6,
		"WELL_KNOWN_KIND_POD":                         7,
		"WELL_KNOWN_KIND_POD_TEMPLATE":                8,
		"WELL_KNOWN_KIND_REPLICATION_CONTROLLER":      9,
		"WELL_KNOWN_KIND_RESOURCE_QUOTA":              10,
		"WELL_KNOWN_KIND_SECRET":                      11,
		"WELL_KNOWN_KIND_SERVICE_ACCOUNT":             12,
		"WELL_KNOWN_KIND_SERVICE":                     13,
		"WELL_KNOWN_KIND_CONTROLLER_REVISION":         14,
		"WELL_KNOWN_KIND_DAEMON_SET":                  15,
		"WELL_KNOWN_KIND_DEPLOYMENT":                  16,
		"WELL_KNOWN_KIND_REPLICA_SET":                 17,
		"WELL_KNOWN_KIND_STATEFUL_SET":                18,
		"WELL_KNOWN_KIND_LOCAL_SUBJECT_ACCESS_REVIEW": 19,
		"WELL_KNOWN_KIND_HORIZONTAL_POD_AUTOSCALER":   20,
		"WELL_KNOWN_KIND_CRON_JOB":                    21,
		"WELL_KNOWN_KIND_JOB":                         22,
		"WELL_KNOWN_KIND_LEASE":                       23,
		"WELL_KNOWN_KIND_ENDPOINT_SLICE":              24,
		"WELL_KNOWN_KIND_INGRESS":                     25,
		"WELL_KNOWN_KIND_NETWORK_POLICY":              26,
		"WELL_KNOWN_KIND_POD_DISRUPTION_BUDGET":       27,
		"WELL_KNOWN_KIND_ROLE_BINDING":                28,
		"WELL_KNOWN_KIND_ROLE":                        29,
		"WELL_KNOWN_KIND_CSI_STORAGE_CAPACITY":        30,
		"WELL_KNOWN_KIND_NAMESPACE":                   31,
	}
)

func (x WellKnownKind) Enum() *WellKnownKind {
	p := new(WellKnownKind)
	*p = x
	return p
}

func (x WellKnownKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WellKnownKind) Descriptor() protoreflect.EnumDescriptor {
	return file_agent_v1alpha1_sync_proto_enumTypes[1].Descriptor()
}

func (WellKnownKind) Type() protoreflect.EnumType {
	return &file_agent_v1alpha1_sync_proto_enumTypes[1]
}

func (x WellKnownKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WellKnownKind.Descriptor instead.
func (WellKnownKind) EnumDescriptor() ([]byte, []int) {
	return file_agent_v1alpha1_sync_proto_rawDescGZIP(), []int{1}
}

type Object struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Kubernetes API version of the resource. e.g. v1, etc.
	ApiVersion string `protobuf:"bytes,1,opt,name=api_version,json=apiVersion,proto3" json:"api_version,omitempty"`
	ApiGroup   string `protobuf:"bytes,7,opt,name=api_group,json=apiGroup,proto3" json:"api_group,omitempty"` // e.g. apps, batch, etc.
	// The Kubernetes kind of the resource. e.g. Pod, Deployment, etc.
	// If the kind is a well-known kind, use well_known_kind instead to save bandwidth.
	//
	// Types that are assignable to Kind:
	//
	//	*Object_WellKnown
	//	*Object_Name
	Kind isObject_Kind `protobuf_oneof:"kind"`
	// metadata is the Kubernetes metadata of the resource.
	// Use metadata.uid to uniquely identify the resource.
	Metadata *v1alpha1.ObjectMeta `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// spec is the Kubernetes spec of the resource.
	// It is only present for add and update events.
	Spec *v1alpha1.ObjectSpec `protobuf:"bytes,5,opt,name=spec,proto3" json:"spec,omitempty"`
	// status is the Kubernetes status of the resource.
	// It is only present for add and update events.
	Status *v1alpha1.ObjectStatus `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty"`
	// owner_uid is the uid of the resource that owns this resource.
	OwnerReferenceUids *v1alpha1.UUIDList `protobuf:"bytes,11,opt,name=owner_reference_uids,json=ownerReferenceUids,proto3" json:"owner_reference_uids,omitempty"`
}

func (x *Object) Reset() {
	*x = Object{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_v1alpha1_sync_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Object) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Object) ProtoMessage() {}

func (x *Object) ProtoReflect() protoreflect.Message {
	mi := &file_agent_v1alpha1_sync_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Object.ProtoReflect.Descriptor instead.
func (*Object) Descriptor() ([]byte, []int) {
	return file_agent_v1alpha1_sync_proto_rawDescGZIP(), []int{0}
}

func (x *Object) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *Object) GetApiGroup() string {
	if x != nil {
		return x.ApiGroup
	}
	return ""
}

func (m *Object) GetKind() isObject_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *Object) GetWellKnown() WellKnownKind {
	if x, ok := x.GetKind().(*Object_WellKnown); ok {
		return x.WellKnown
	}
	return WellKnownKind_WELL_KNOWN_KIND_UNSPECIFIED
}

func (x *Object) GetName() string {
	if x, ok := x.GetKind().(*Object_Name); ok {
		return x.Name
	}
	return ""
}

func (x *Object) GetMetadata() *v1alpha1.ObjectMeta {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Object) GetSpec() *v1alpha1.ObjectSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Object) GetStatus() *v1alpha1.ObjectStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Object) GetOwnerReferenceUids() *v1alpha1.UUIDList {
	if x != nil {
		return x.OwnerReferenceUids
	}
	return nil
}

type isObject_Kind interface {
	isObject_Kind()
}

type Object_WellKnown struct {
	WellKnown WellKnownKind `protobuf:"varint,2,opt,name=well_known,json=wellKnown,proto3,enum=agent.v1alpha1.WellKnownKind,oneof"`
}

type Object_Name struct {
	Name string `protobuf:"bytes,3,opt,name=name,proto3,oneof"`
}

func (*Object_WellKnown) isObject_Kind() {}

func (*Object_Name) isObject_Kind() {}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Op Op `protobuf:"varint,1,opt,name=op,proto3,enum=agent.v1alpha1.Op" json:"op,omitempty"`
	// seq is an increasing sequence number for each event. It is used to
	// detect missed events. The first event has seq = 0, which means full sync containing
	// all non-deleted resources.
	Seq int64 `protobuf:"varint,2,opt,name=seq,proto3" json:"seq,omitempty"`
	// object is the resource that is being added, removed, or updated.
	Object *Object `protobuf:"bytes,3,opt,name=object,proto3" json:"object,omitempty"`
	// cluster_id is the ID of the cluster that the event is from.
	// This is generally the uid of the kube-system namespace.
	//
	// Deprecated: Do not use.
	ClusterId string `protobuf:"bytes,4,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_v1alpha1_sync_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_agent_v1alpha1_sync_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_agent_v1alpha1_sync_proto_rawDescGZIP(), []int{1}
}

func (x *Event) GetOp() Op {
	if x != nil {
		return x.Op
	}
	return Op_OP_UNSPECIFIED
}

func (x *Event) GetSeq() int64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *Event) GetObject() *Object {
	if x != nil {
		return x.Object
	}
	return nil
}

// Deprecated: Do not use.
func (x *Event) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

var File_agent_v1alpha1_sync_proto protoreflect.FileDescriptor

var file_agent_v1alpha1_sync_proto_rawDesc = []byte{
	0x0a, 0x19, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x20, 0x65, 0x6e, 0x73,
	0x69, 0x67, 0x6e, 0x69, 0x61, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x65,
	0x6e, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x61, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9a, 0x03, 0x0a, 0x06,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x69,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x70, 0x69, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x70, 0x69, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x3e, 0x0a, 0x0a, 0x77, 0x65, 0x6c, 0x6c, 0x5f, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x57, 0x65, 0x6c, 0x6c, 0x4b, 0x6e,
	0x6f, 0x77, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x09, 0x77, 0x65, 0x6c, 0x6c, 0x4b,
	0x6e, 0x6f, 0x77, 0x6e, 0x12, 0x14, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65,
	0x6e, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x31, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x61, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x70,
	0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x37, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x6e, 0x73, 0x69, 0x67,
	0x6e, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x4d, 0x0a, 0x14, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x65, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x12, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x55, 0x69, 0x64, 0x73,
	0x42, 0x06, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x90, 0x01, 0x0a, 0x05, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x22, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x4f, 0x70, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x73, 0x65, 0x71, 0x12, 0x2e, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x21, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x2a, 0x42, 0x0a, 0x02, 0x4f,
	0x70, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x50, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x10,
	0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x10, 0x02,
	0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x50, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x03, 0x2a,
	0xd1, 0x08, 0x0a, 0x0d, 0x57, 0x65, 0x6c, 0x6c, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x4b, 0x69, 0x6e,
	0x64, 0x12, 0x1f, 0x0a, 0x1b, 0x57, 0x45, 0x4c, 0x4c, 0x5f, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f,
	0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x57, 0x45, 0x4c, 0x4c, 0x5f, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12,
	0x1e, 0x0a, 0x1a, 0x57, 0x45, 0x4c, 0x4c, 0x5f, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x4b, 0x49,
	0x4e, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0x02, 0x12,
	0x1d, 0x0a, 0x19, 0x57, 0x45, 0x4c, 0x4c, 0x5f, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x4b, 0x49,
	0x4e, 0x44, 0x5f, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x53, 0x10, 0x03, 0x12, 0x19,
	0x0a, 0x15, 0x57, 0x45, 0x4c, 0x4c, 0x5f, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x4b, 0x49, 0x4e,
	0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b, 0x57, 0x45, 0x4c,
	0x4c, 0x5f, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4c, 0x49, 0x4d,
	0x49, 0x54, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x05, 0x12, 0x2b, 0x0a, 0x27, 0x57, 0x45,
	0x4c, 0x4c, 0x5f, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x50, 0x45,
	0x52, 0x53, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f,
	0x43, 0x4c, 0x41, 0x49, 0x4d, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x57, 0x45, 0x4c, 0x4c, 0x5f,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x50, 0x4f, 0x44, 0x10, 0x07,
	0x12, 0x20, 0x0a, 0x1c, 0x57, 0x45, 0x4c, 0x4c, 0x5f, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x4b,
	0x49, 0x4e, 0x44, 0x5f, 0x50, 0x4f, 0x44, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45,
	0x10, 0x08, 0x12, 0x2a, 0x0a, 0x26, 0x57, 0x45, 0x4c, 0x4c, 0x5f, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x52, 0x10, 0x09, 0x12, 0x22,
	0x0a, 0x1e, 0x57, 0x45, 0x4c, 0x4c, 0x5f, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x4b, 0x49, 0x4e,
	0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x41,
	0x10, 0x0a, 0x12, 0x1a, 0x0a, 0x16, 0x57, 0x45, 0x4c, 0x4c, 0x5f, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x53, 0x45, 0x43, 0x52, 0x45, 0x54, 0x10, 0x0b, 0x12, 0x23,
	0x0a, 0x1f, 0x57, 0x45, 0x4c, 0x4c, 0x5f, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x4b, 0x49, 0x4e,
	0x44, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x10, 0x0c, 0x12, 0x1b, 0x0a, 0x17, 0x57, 0x45, 0x4c, 0x4c, 0x5f, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x0d,
	0x12, 0x27, 0x0a, 0x23, 0x57, 0x45, 0x4c, 0x4c, 0x5f, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x4b,
	0x49, 0x4e, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x52,
	0x45, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x0e, 0x12, 0x1e, 0x0a, 0x1a, 0x57, 0x45, 0x4c,
	0x4c, 0x5f, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x44, 0x41, 0x45,
	0x4d, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x0f, 0x12, 0x1e, 0x0a, 0x1a, 0x57, 0x45, 0x4c,
	0x4c, 0x5f, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x44, 0x45, 0x50,
	0x4c, 0x4f, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x10, 0x12, 0x1f, 0x0a, 0x1b, 0x57, 0x45, 0x4c,
	0x4c, 0x5f, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x50,
	0x4c, 0x49, 0x43, 0x41, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x11, 0x12, 0x20, 0x0a, 0x1c, 0x57, 0x45,
	0x4c, 0x4c, 0x5f, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x12, 0x12, 0x2f, 0x0a, 0x2b,
	0x57, 0x45, 0x4c, 0x4c, 0x5f, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f,
	0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x53, 0x55, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x41, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x10, 0x13, 0x12, 0x2d, 0x0a,
	0x29, 0x57, 0x45, 0x4c, 0x4c, 0x5f, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x4b, 0x49, 0x4e, 0x44,
	0x5f, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x4f, 0x4e, 0x54, 0x41, 0x4c, 0x5f, 0x50, 0x4f, 0x44, 0x5f,
	0x41, 0x55, 0x54, 0x4f, 0x53, 0x43, 0x41, 0x4c, 0x45, 0x52, 0x10, 0x14, 0x12, 0x1c, 0x0a, 0x18,
	0x57, 0x45, 0x4c, 0x4c, 0x5f, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f,
	0x43, 0x52, 0x4f, 0x4e, 0x5f, 0x4a, 0x4f, 0x42, 0x10, 0x15, 0x12, 0x17, 0x0a, 0x13, 0x57, 0x45,
	0x4c, 0x4c, 0x5f, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4a, 0x4f,
	0x42, 0x10, 0x16, 0x12, 0x19, 0x0a, 0x15, 0x57, 0x45, 0x4c, 0x4c, 0x5f, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4c, 0x45, 0x41, 0x53, 0x45, 0x10, 0x17, 0x12, 0x22,
	0x0a, 0x1e, 0x57, 0x45, 0x4c, 0x4c, 0x5f, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x4b, 0x49, 0x4e,
	0x44, 0x5f, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x53, 0x4c, 0x49, 0x43, 0x45,
	0x10, 0x18, 0x12, 0x1b, 0x0a, 0x17, 0x57, 0x45, 0x4c, 0x4c, 0x5f, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x49, 0x4e, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x19, 0x12,
	0x22, 0x0a, 0x1e, 0x57, 0x45, 0x4c, 0x4c, 0x5f, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x4b, 0x49,
	0x4e, 0x44, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43,
	0x59, 0x10, 0x1a, 0x12, 0x29, 0x0a, 0x25, 0x57, 0x45, 0x4c, 0x4c, 0x5f, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x50, 0x4f, 0x44, 0x5f, 0x44, 0x49, 0x53, 0x52, 0x55,
	0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x44, 0x47, 0x45, 0x54, 0x10, 0x1b, 0x12, 0x20,
	0x0a, 0x1c, 0x57, 0x45, 0x4c, 0x4c, 0x5f, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x4b, 0x49, 0x4e,
	0x44, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x1c,
	0x12, 0x18, 0x0a, 0x14, 0x57, 0x45, 0x4c, 0x4c, 0x5f, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x4b,
	0x49, 0x4e, 0x44, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x10, 0x1d, 0x12, 0x28, 0x0a, 0x24, 0x57, 0x45,
	0x4c, 0x4c, 0x5f, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x43, 0x53,
	0x49, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x43, 0x49,
	0x54, 0x59, 0x10, 0x1e, 0x12, 0x1d, 0x0a, 0x19, 0x57, 0x45, 0x4c, 0x4c, 0x5f, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43,
	0x45, 0x10, 0x1f, 0x42, 0xbb, 0x01, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x42, 0x09, 0x53, 0x79, 0x6e, 0x63,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x02, 0x50, 0x01, 0x5a, 0x3f, 0x65, 0x6e, 0x73, 0x69, 0x67,
	0x6e, 0x69, 0x61, 0x2e, 0x64, 0x65, 0x76, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x3b, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x41, 0x58, 0x58,
	0xaa, 0x02, 0x0e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0xca, 0x02, 0x0e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0xe2, 0x02, 0x1a, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x0f, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_agent_v1alpha1_sync_proto_rawDescOnce sync.Once
	file_agent_v1alpha1_sync_proto_rawDescData = file_agent_v1alpha1_sync_proto_rawDesc
)

func file_agent_v1alpha1_sync_proto_rawDescGZIP() []byte {
	file_agent_v1alpha1_sync_proto_rawDescOnce.Do(func() {
		file_agent_v1alpha1_sync_proto_rawDescData = protoimpl.X.CompressGZIP(file_agent_v1alpha1_sync_proto_rawDescData)
	})
	return file_agent_v1alpha1_sync_proto_rawDescData
}

var file_agent_v1alpha1_sync_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_agent_v1alpha1_sync_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_agent_v1alpha1_sync_proto_goTypes = []interface{}{
	(Op)(0),                       // 0: agent.v1alpha1.Op
	(WellKnownKind)(0),            // 1: agent.v1alpha1.WellKnownKind
	(*Object)(nil),                // 2: agent.v1alpha1.Object
	(*Event)(nil),                 // 3: agent.v1alpha1.Event
	(*v1alpha1.ObjectMeta)(nil),   // 4: ensignia.v1alpha1.ObjectMeta
	(*v1alpha1.ObjectSpec)(nil),   // 5: ensignia.v1alpha1.ObjectSpec
	(*v1alpha1.ObjectStatus)(nil), // 6: ensignia.v1alpha1.ObjectStatus
	(*v1alpha1.UUIDList)(nil),     // 7: ensignia.v1alpha1.UUIDList
}
var file_agent_v1alpha1_sync_proto_depIdxs = []int32{
	1, // 0: agent.v1alpha1.Object.well_known:type_name -> agent.v1alpha1.WellKnownKind
	4, // 1: agent.v1alpha1.Object.metadata:type_name -> ensignia.v1alpha1.ObjectMeta
	5, // 2: agent.v1alpha1.Object.spec:type_name -> ensignia.v1alpha1.ObjectSpec
	6, // 3: agent.v1alpha1.Object.status:type_name -> ensignia.v1alpha1.ObjectStatus
	7, // 4: agent.v1alpha1.Object.owner_reference_uids:type_name -> ensignia.v1alpha1.UUIDList
	0, // 5: agent.v1alpha1.Event.op:type_name -> agent.v1alpha1.Op
	2, // 6: agent.v1alpha1.Event.object:type_name -> agent.v1alpha1.Object
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_agent_v1alpha1_sync_proto_init() }
func file_agent_v1alpha1_sync_proto_init() {
	if File_agent_v1alpha1_sync_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_agent_v1alpha1_sync_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Object); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_v1alpha1_sync_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_agent_v1alpha1_sync_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Object_WellKnown)(nil),
		(*Object_Name)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_agent_v1alpha1_sync_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_agent_v1alpha1_sync_proto_goTypes,
		DependencyIndexes: file_agent_v1alpha1_sync_proto_depIdxs,
		EnumInfos:         file_agent_v1alpha1_sync_proto_enumTypes,
		MessageInfos:      file_agent_v1alpha1_sync_proto_msgTypes,
	}.Build()
	File_agent_v1alpha1_sync_proto = out.File
	file_agent_v1alpha1_sync_proto_rawDesc = nil
	file_agent_v1alpha1_sync_proto_goTypes = nil
	file_agent_v1alpha1_sync_proto_depIdxs = nil
}
